import os
import json
import csv
import subprocess

# C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n v√† m√¥i tr∆∞·ªùng
SCOUTSUITE_PATH = "/home/kali/toolcloud/ScoutSuite/scout.py"  # ƒê∆∞·ªùng d·∫´n ch√≠nh x√°c ƒë·∫øn scout.py
VENV_PATH = "/home/kali/toolcloud/ScoutSuite/scoutenv/bin/activate"  # ƒê∆∞·ªùng d·∫´n m√¥i tr∆∞·ªùng ·∫£o
OUTPUT_DIR = "scoutsuite-report"
REPORT_FILE = f"{OUTPUT_DIR}/scoutsuite-results.json"
CSV_FILE = f"{OUTPUT_DIR}/azure_security_report.csv"

def get_subscription_id():
    """Y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p Subscription ID c·ªßa Azure."""
    sub_id = input("üîπ Nh·∫≠p Azure Subscription ID: ").strip()
    if not sub_id:
        print("[!] Subscription ID kh√¥ng h·ª£p l·ªá! H√£y nh·∫≠p l·∫°i.")
        exit(1)
    return sub_id

def run_scoutsuite(subscription_id):
    """Ch·∫°y ScoutSuite nh∆∞ng kh√¥ng xu·∫•t file, l·∫•y d·ªØ li·ªáu t·ª´ terminal."""
    print(f"[+] ƒêang ch·∫°y ScoutSuite cho Azure (Subscription: {subscription_id})...")
    try:
        command = f"source {VENV_PATH} && python3 {SCOUTSUITE_PATH} azure --subscriptions {subscription_id} -c --no-browser --no-report-generator --quiet"
        
        # Ch·∫°y l·ªánh v√† l·∫•y d·ªØ li·ªáu JSON t·ª´ stdout
        result = subprocess.run(command, shell=True, check=True, executable="/bin/bash", capture_output=True, text=True)
        scout_data = json.loads(result.stdout)  # Chuy·ªÉn output th√†nh JSON
        
        print("[+] Qu√©t ho√†n t·∫•t! ƒêang ph√¢n t√≠ch d·ªØ li·ªáu...")
        return scout_data
    except subprocess.CalledProcessError as e:
        print(f"[!] L·ªói khi ch·∫°y ScoutSuite: {e}")
        exit(1)

def analyze_report():
    """Ph√¢n t√≠ch b√°o c√°o v√† xu·∫•t k·∫øt qu·∫£ ra CSV."""
    if not os.path.exists(REPORT_FILE):
        print(f"[!] Kh√¥ng t√¨m th·∫•y b√°o c√°o: {REPORT_FILE}")
        exit(1)

    print("[+] ƒêang ph√¢n t√≠ch b√°o c√°o Azure...")
    with open(REPORT_FILE, "r", encoding="utf-8") as file:
        data = json.load(file)

    # L·ªçc c√°c c·∫£nh b√°o m·ª©c ƒë·ªô cao
    critical_issues = []
    for service, findings in data["services"].items():
        for finding in findings["findings"]:
            if finding["level"] in ["high", "critical"]:
                critical_issues.append([
                    service,
                    finding["title"],
                    finding["level"],
                    finding.get("description", "Kh√¥ng c√≥ m√¥ t·∫£"),
                    finding.get("resource", "Kh√¥ng x√°c ƒë·ªãnh")
                ])

    if critical_issues:
        print("\n[+] C√°c l·ªó h·ªïng nghi√™m tr·ªçng ph√°t hi·ªán trong Azure:")
        for issue in critical_issues:
            print(f"- [{issue[2].upper()}] {issue[1]} ({issue[0]})")
            print(f"  M√¥ t·∫£: {issue[3]}")
            print(f"  T√†i nguy√™n ·∫£nh h∆∞·ªüng: {issue[4]}\n")
    else:
        print("[+] Kh√¥ng ph√°t hi·ªán l·ªó h·ªïng nghi√™m tr·ªçng n√†o trong Azure!")

    # Xu·∫•t b√°o c√°o ra CSV
    write_to_csv(critical_issues)

def write_to_csv(data):
    """Ghi d·ªØ li·ªáu l·ªó h·ªïng ra file CSV."""
    headers = ["D·ªãch v·ª•", "T√™n L·ªó H·ªïng", "M·ª©c ƒê·ªô", "M√¥ T·∫£", "T√†i Nguy√™n ·∫¢nh H∆∞·ªüng"]
    
    with open(CSV_FILE, mode="w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(headers)
        writer.writerows(data)

    print(f"[+] B√°o c√°o CSV ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {CSV_FILE}")

if __name__ == "__main__":
    subscription_id = get_subscription_id()  # Y√™u c·∫ßu nh·∫≠p Subscription ID
    run_scoutsuite(subscription_id)
    analyze_report()
